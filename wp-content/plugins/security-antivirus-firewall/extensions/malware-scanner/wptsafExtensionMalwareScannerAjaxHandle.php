<?php
/*  
 * Security Antivirus Firewall (wpTools S.A.F.)
 * http://wptools.co/wordpress-security-antivirus-firewall
 * Version:           	2.1.23
 * Build:             	34569
 * Author:            	WpTools
 * Author URI:        	http://wptools.co
 * License:           	License: GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 * Date:              	Tue, 17 Jan 2017 18:05:12 GMT
 */

if ( ! defined( 'WPINC' ) )  die;
if ( ! defined( 'ABSPATH' ) ) exit;

class wptsafExtensionMalwareScannerAjaxHandle extends wptsafAbstractExtensionAjaxHandle{

	public function __construct(wptsafAbstractExtension $extension){
		parent::__construct($extension);

		$this->logHeader = array(
			'date_gmt' => __('Date', 'wptsaf_security'),
			'file' => __('File', 'wptsaf_security'),
			'status' => __('Status', 'wptsaf_security'),
/*			'scan_mode' => __('Scan Mode', 'wptsaf_security'),*/
			'scan_status' => __('Scan Status', 'wptsaf_security'),
			'scan_date_gmt' => __('Scan Date', 'wptsaf_security'),
		);
	}

	public function setEnable($isEnabled){
		$isEnabled = (bool)$isEnabled;
		$settings = $this->extension->getSettings();
		$apiKey = $settings->get('api_key');
		
		if (!$this->isCurlExists()) {
			$view  = new wptsafView();
			$this->response->setResponse($view->content(
				$this->extension->getExtensionDir() . 'dialogs/curl-not-exists.php',
				array(
					'extensionTitle' => $this->extension->getTitle()
				)
			));
			$this->response->addJsCallback('wptsafCallback.dialogShowContent');
			return $this->response;
		}

		if ($isEnabled && empty($apiKey) ) {
			$view  = new wptsafView();
			$this->response->setResponse($view->content(
				$this->extension->getExtensionDir() . 'dialogs/empty-api-key.php',
				array(
					'extensionTitle' => $this->extension->getTitle()
				)
			));
			$this->response->addJsCallback('wptsafCallback.dialogShowContent');
			//$this->response->addJsCallback(array('wptsafCallback.updateWidget', $this->extension->getName()));
			return $this->response;
		}

		if ($settings->get('is_enabled') !== $isEnabled) {
			$settings->set('is_enabled', $isEnabled);
			$settings->save();
		}

		$this->response->setResponse($this->extension->createWidget()->content());
		$this->response->addJsCallback('wptsafCallback.updateWidgetContent');

		return $this->response;
	}


	public function settings(){
		$view = new wptsafView();
		$response = $view->content(
			$this->extension->getExtensionDir() . 'template/settings.php',
			array(
				'extensionTitle' => $this->extension->getTitle(),
				'errors' => array(),
				'settings' => $this->extension->getSettings()->get()
			)
		);
		$this->response->setResponse($response);

		$this->response->addJsCallback('wptsafCallback.dialogHide');
		$this->response->addJsCallback('wptsafCallback.popupShowContent');

		return $this->response;
	}


	public function settingsSave(){
		$validator = wptsafValidator::getInstance();
		$settings = $this->extension->getSettings();
		$request = array();
		$errors = array();

		$request['is_enabled'] = isset($_POST['is_enabled'])
			? ((bool)$_POST['is_enabled'])
			: false;

		$request['log_rotation'] = is_numeric($_POST['log_rotation'])
			? intval($_POST['log_rotation'])
			: strip_tags($_POST['log_rotation']);
		$errors['log_rotation'] = $validator->validate('log_rotation', $request['log_rotation']);

		$request['api_key'] = isset($_POST['api_key']) ? strip_tags(trim($_POST['api_key'])) : '';
		if ($request['is_enabled'] && empty($request['api_key'])) {
			$errors['api_key'] = __('The field is required for enabled extension', 'wptsaf_security');
		}

		$request['is_notify_admin'] = isset($_POST['is_notify_admin'])
			? ((bool)$_POST['is_notify_admin'])
			: false;

		if ($request['is_enabled'] && !$this->isCurlExists()) {
			$view  = new wptsafView();
			$this->response->setResponse($view->content(
				$this->extension->getExtensionDir() . 'dialogs/curl-not-exists.php',
				array(
					'extensionTitle' => $this->extension->getTitle()
				)
			));
			$this->response->addJsCallback('wptsafCallback.dialogShowContent');
			return $this->response;
		}

		$errors = array_filter($errors);
		if (empty($errors)) {
			foreach ($request as $field => $value) {
				$settings->set($field, $value);
			}
			$settings->save();
			$request = $settings->get();
		}

		$view = new wptsafView();
		$response = $view->content(
			$this->extension->getExtensionDir() . 'template/settings.php',
			array(
				'extensionTitle' => $this->extension->getTitle(),
				'errors' => $errors,
				'settings' => $request
			)
		);
		$this->response->setResponse($response);

		if (empty($errors)) {
			$this->response->addMessage(__('Settings are updated', 'wptsaf_security'), wptsafAjaxResponse::MESSAGE_TYPE_SUCCESS);
			$this->response->addJsCallback(['wptsafCallback.updateWidget', $this->extension->getName()]);
			$this->response->addJsCallback('wptsafCallback.popupHide');
		} else {
			$this->response->addJsCallback('wptsafCallback.popupShowContent');
		}

		return $this->response;
	}


	public function log($status = null, $scanStatus = null){
		$view = new wptsafView();
		
		//$where = array_filter(array('status' => $status, 'scan_status' => $scanStatus));
		$where = array_filter([
			$status ? ['status', '=', $status] : null,
			$scanStatus ? ['scan_status', '=', $scanStatus] : null,
		]);

		$rows = $this->extension->getLog()->getRows(WPTSAF_LOG_LIMIT, 0, 'DESC', 'id', $where);
		$limitMessage = null;

		if (is_wp_error($rows)) {
			$this->response->addError($rows);
			return $this->response;
		}

		if (
			WPTSAF_LOG_LIMIT == count($rows)
			&& $this->extension->getLog()->getRows(1, WPTSAF_LOG_LIMIT)
		) {
			wptsafExtensionSystemLog::getInstance()->getLog()->addWarningMessage(
				$this->extension,
				__('The number of entries in the log exceeds the display limit', 'wptsaf_security')
			);
			$limitMessage = __('The number of entries in the log exceeds the display limit', 'wptsaf_security');
		}

		$response = $view->content(
			$this->extension->getExtensionDir() . 'template/log.php',
			array(
				'extensionName' => $this->extension->getName(),
				'extensionTitle' => $this->extension->getTitle(),
				'limitMessage' => $limitMessage,
				'header' => $this->logHeader,
				'rows' => $rows,
				'isFiltered' => !empty($where)
			)
		);

		$this->response->setResponse($response);
		$this->response->addJsCallback('wptsafCallback.popupShowContent');

		return $this->response;
	}

	public function logRowSave(){
		$view = new wptsafView();
		$validator = wptsafValidator::getInstance();
		$request = array();
		$errors = array();

		$request['id'] = isset($_POST['id']) ? absint($_POST['id']) : null;

		$request['status'] = isset($_POST['status']) ? strip_tags($_POST['status']) : '';
		$errors['status'] = $validator->validate('required', $request['status']);

		$request['scan_mode'] = isset($_POST['scan_mode']) ? strip_tags($_POST['scan_mode']) : '';

		$request['scan_status'] = isset($_POST['scan_status']) ? strip_tags($_POST['scan_status']) : '';
		$errors['scan_status'] = $validator->validate('required', $request['scan_status']);

		$errors = array_filter($errors);
		if (!empty($errors)) {
			$request = array_merge(
				$request,
				$this->extension->getLog()->getRow($request['id'])
			);
			$response = $view->content(
				$this->extension->getExtensionDir() . 'template/log-row.php',
				array(
					'extensionTitle' => $this->extension->getTitle(),
					'errors' => $errors,
					'row' => $request
				)
			);
			$this->response->setResponse($response);
			$this->response->addJsCallback('wptsafCallback.formShowContent');
			return $this->response;
		}

		$result = $this->extension->getLog()->updateRow($request);
		if (is_wp_error($result)) {
			$this->response->addError($result);
			return $this->response;
		}

		$this->response->addMessage(
			__('Scan file is updated', 'wptsaf_security'),
			wptsafAjaxResponse::MESSAGE_TYPE_SUCCESS
		);
		$this->response->addJsCallback(['wptsafCallback.updateWidget', $this->extension->getName()]);
		$this->response->addJsCallback('wptsafCallback.formHide');
		return $this->response;
	}

	protected function isCurlExists(){
		return function_exists('curl_version');
	}
}
